1. 文件标签：构成html最基本的标签
	* html:html文档的根标签
	* head：头标签。用于指定html文档的一些属性。引入外部的资源
	* title：标题标签。
	* body：体标签
	* <!DOCTYPE html>：html5中定义该文档是html文档
2. 文本标签：和文本有关的标签
	* 注释：<!-- 注释内容 -->
	* <h1> to <h6>：标题标签
		* h1~h6:字体大小逐渐递减
	* <p>：段落标签
	* <br>：换行标签
	* <hr>：展示一条水平线
		* 属性：
			* color：颜色
			* width：宽度
			* size：高度
			* align：对其方式
				* center：居中
				* left：左对齐
				* right：右对齐
	* <b>：字体加粗
	* <i>：字体斜体
	* <font>:字体标签
	* <center>:文本居中
		* 属性：
			* color：颜色
			* size：大小
			* face：字体

	* 属性定义：
		* color：
			1. 英文单词：red,green,blue
			2. rgb(值1，值2，值3)：值的范围：0~255  如  rgb(0,0,255)
			3. #值1值2值3：值的范围：00~FF之间。如： #FF00FF
		* width：
			1. 数值：width='20' ,数值的单位，默认是 px(像素)
			2. 数值%：占比相对于父元素的比例



3. 图片标签：
	* img：展示图片
		* 属性：
			* src：指定图片的位置

	* 代码：
	     <!--展示一张图片 img-->

		 <img src="image/jingxuan_2.jpg" align="right" alt="古镇" width="500" height="500"/>
			
		<!--
		相对路径
		* 以.开头的路径
		 * ./：代表当前目录  ./image/1.jpg
		* ../:代表上一级目录
		-->
		<img src="./image/jiangwai_1.jpg">
		<img src="../image/jiangwai_1.jpg">
4. 列表标签：
	* 有序列表：
		* ol:
		* li:
	* 无序列表：
		* ul:
		* li:
5. 链接标签：
	* a:定义一个超链接
		* 属性：
			* href：指定访问资源的URL(统一资源定位符)
			* target：指定打开资源的方式
			* _self:默认值，在当前页面打开
			* _blank：在空白页面打开
6. div和span：
			* div:每一个div占满一整行。块级标签
        	* span：文本信息在一行展示，行内标签 内联标签

7. 语义化标签：html5中为了提高程序的可读性，提供了一些标签。
	1. <header>：页眉
	2. <footer>：页脚


8. 表格标签：
	* table：定义表格
		* width：宽度
		* border：边框
		* cellpadding：定义内容和单元格的距离
		* cellspacing：定义单元格之间的距离。如果指定为0，则单元格的线会合为一条、
		* bgcolor：背景色
		* align：对齐方式
	* tr：定义行
		* bgcolor：背景色
		* align：对齐方式
	* td：定义单元格
		* colspan：合并列
		* rowspan：合并行
	* th：定义表头单元格
	* <caption>：表格标题
	* <thead>：表示表格的头部分
	* <tbody>：表示表格的体部分
	* <tfoot>：表示表格的脚部分
*9表单：
	* 概念：用于采集用户输入的数据的。用于和服务器进行交互。
	* form：用于定义表单的。可以定义一个范围，范围代表采集用户数据的范围
            * 属性：
                * action：指定提交数据的URL
                * method:指定提交方式
                    * 分类：一共7种，2种比较常用
                       * get：
                            1. 请求参数会在地址栏中显示。会封装到请求行中(HTTP协议后讲解)。
                            2. 请求参数大小是有限制的。
                            3. 不太安全。
                       * post：
                            2. 请求参数不会再地址栏中显示。会封装在请求体中(HTTP协议后讲解)
                            2. 请求参数的大小没有限制。
                            3. 较为安全。

            * 表单项中的数据要想被提交：必须指定其name属性

* 表单项标签：
	* input：可以通过type属性值，改变元素展示的样式
		* type属性：
			* text：文本输入框，默认值
				* placeholder：指定输入框的提示信息，当输入框的内容发生变化，会自动清空提示信息	
			* password：密码输入框
			* radio:单选框
				* 注意：
					1. 要想让多个单选框实现单选的效果，则多个单选框的name属性值必须一样。
					2. 一般会给每一个单选框提供value属性，指定其被选中后提交的值
					3. checked属性，可以指定默认值
			* checkbox：复选框
				* 注意：
					1. 一般会给每一个单选框提供value属性，指定其被选中后提交的值
					2. checked属性，可以指定默认值

			* file：文件选择框
			* hidden：隐藏域，用于提交一些信息。
			* 按钮：
				* submit：提交按钮。可以提交表单
				* button：普通按钮
				* image：图片提交按钮
					* src属性指定图片的路径	

			 * label：指定输入项的文字描述信息
				   * 注意：
					   * label的for属性一般会和 input 的 id属性值 对应。如果对应了，则点击label区域，会让input输入框获取焦点。
			* select: 下拉列表
				* 子元素：option，指定列表项
				
			* textarea：文本域
				* cols：指定列数，每一行有多少个字符
				* rows：默认多少行。

1.选择器：筛选具有相似特征的元素
      * 分类：
	1. 基础选择器
		1. id选择器：选择具体的id属性值的元素.建议在一个html页面中id值唯一
		     * 语法：#id属性值{}
		2. 元素选择器：选择具有相同标签名称的元素
		      * 语法： 标签名称{}
		      * 注意：id选择器优先级高于元素选择器
		3. 类选择器：选择具有相同的class属性值的元素。
		        * 语法：.class属性值{}
		        * 注意：类选择器选择器优先级高于元素选择器
		2. 扩展选择器：
			1. 选择所有元素：
				* 语法： *{}
			2. 并集选择器：
				* 选择器1,选择器2{}
				
			3. 子选择器：筛选选择器1元素下的选择器2元素
				* 语法：  选择器1 选择器2{}
			4. 父选择器：筛选选择器2的父元素选择器1
				* 语法：  选择器1 > 选择器2{}

			5. 属性选择器：选择元素名称，属性名=属性值的元素
				* 语法：  元素名称[属性名="属性值"]{}

			6. 伪类选择器：选择一些元素具有的状态
				* 语法： 元素:状态{}
				* 如： <a>
					* 状态：
						* link：初始化的状态
						* visited：被访问过的状态
						* active：正在访问状态
						* hover：鼠标悬浮状态
2. 属性
	1. 字体、文本
		* font-size：字体大小
		* color：文本颜色
		* text-align：对其方式
		* line-height：行高 
	2. 背景
		* background：
                                   background-color: white;
                                   background: url("img/register_bg.png") no-repeat center;
	3. 边框
		* border：设置边框，符合属性
                                    border: 8px solid #EEEEEE;
                                     /*设置边框圆角*/
		      border-radius: 5px;
	4. 尺寸
		* width：宽度
		* height：高度
	5. 盒子模型：控制布局
		* margin：外边距
		* padding：内边距
			* 默认情况下内边距会影响整个盒子的大小
			* box-sizing: border-box;  设置盒子的属性，让width和height就是最终盒子的大小
		* float：浮动
			* left
			* right



# 今日内容：
	1. JavaScript：
		1. ECMAScript：
		2. BOM：
		3. DOM：
			1. 事件

## DOM简单学习：为了满足案例要求
	* 功能：控制html文档的内容
	* 获取页面标签(元素)对象：Element
		* document.getElementById("id值"):通过元素的id获取元素对象

	* 操作Element对象：
		1. 修改属性值：
			1. 明确获取的对象是哪一个？
			2. 查看API文档，找其中有哪些属性可以设置
		2. 修改标签体内容：
			* 属性：innerHTML
			1. 获取元素对象
			2. 使用innerHTML属性修改标签体内容

## 事件简单学习
	* 功能： 某些组件被执行了某些操作后，触发某些代码的执行。
		* 造句：  xxx被xxx,我就xxx
			* 我方水晶被摧毁后，我就责备对友。
			* 敌方水晶被摧毁后，我就夸奖自己。

	* 如何绑定事件
		1. 直接在html标签上，指定事件的属性(操作)，属性值就是js代码
			1. 事件：onclick--- 单击事件

		2. 通过js获取元素对象，指定事件属性，设置一个函数

		* 代码：
			<body>
				<img id="light" src="img/off.gif"  onclick="fun();">
				<img id="light2" src="img/off.gif">
				
				<script>
				    function fun(){
				        alert('我被点了');
				        alert('我又被点了');
				    }
				
				    function fun2(){
				        alert('咋老点我？');
				    }
				
				    //1.获取light2对象
				    var light2 = document.getElementById("light2");
				    //2.绑定事件
				    light2.onclick = fun2;
				
				
				</script>
			</body>
	
	* 案例1：电灯开关
		<!DOCTYPE html>
		<html lang="en">
		<head>
		    <meta charset="UTF-8">
		    <title>电灯开关</title>
		
		</head>
		<body>
		
		<img id="light" src="img/off.gif">
		
		<script>
		    /*
		        分析：
		            1.获取图片对象
		            2.绑定单击事件
		            3.每次点击切换图片
		                * 规则：
		                    * 如果灯是开的 on,切换图片为 off
		                    * 如果灯是关的 off,切换图片为 on
		                * 使用标记flag来完成
		
		     */
		
		    //1.获取图片对象
		    var light = document.getElementById("light");
		
		    var flag = false;//代表灯是灭的。 off图片
		
		    //2.绑定单击事件
		    light.onclick = function(){
		        if(flag){//判断如果灯是开的，则灭掉
		            light.src = "img/off.gif";
		            flag = false;
		
		        }else{
		            //如果灯是灭的，则打开
		
		            light.src = "img/on.gif";
		            flag = true;
		        }
		
		
		    }
		    
		</script>
		</body>
		</html>


# BOM:
	1. 概念：Browser Object Model 浏览器对象模型
		* 将浏览器的各个组成部分封装成对象。

	2. 组成：
		* Window：窗口对象
		* Navigator：浏览器对象
		* Screen：显示器屏幕对象
		* History：历史记录对象
		* Location：地址栏对象

	3. Window：窗口对象
	    1. 创建
	    2. 方法
	         1. 与弹出框有关的方法：
	            alert()	显示带有一段消息和一个确认按钮的警告框。
	            confirm()	显示带有一段消息以及确认按钮和取消按钮的对话框。
	                * 如果用户点击确定按钮，则方法返回true
	                * 如果用户点击取消按钮，则方法返回false
	            prompt()	显示可提示用户输入的对话框。
	                * 返回值：获取用户输入的值
	         2. 与打开关闭有关的方法：
	            close()	关闭浏览器窗口。
	                * 谁调用我 ，我关谁
	            open()	打开一个新的浏览器窗口
	                * 返回新的Window对象
	         3. 与定时器有关的方式
	            setTimeout()	在指定的毫秒数后调用函数或计算表达式。
	                * 参数：
	                    1. js代码或者方法对象
	                    2. 毫秒值
	                * 返回值：唯一标识，用于取消定时器
	            clearTimeout()	取消由 setTimeout() 方法设置的 timeout。
	
	            setInterval()	按照指定的周期（以毫秒计）来调用函数或计算表达式。
	            clearInterval()	取消由 setInterval() 设置的 timeout。
	
	    3. 属性：
	        1. 获取其他BOM对象：
	            history
	            location
	            Navigator
	            Screen:
	        2. 获取DOM对象
	            document
	    4. 特点
	        * Window对象不需要创建可以直接使用 window使用。 window.方法名();
	        * window引用可以省略。  方法名();


	4. Location：地址栏对象
		1. 创建(获取)：
			1. window.location
			2. location

		2. 方法：
			* reload()	重新加载当前文档。刷新
		3. 属性
			* href	设置或返回完整的 URL。


	5. History：历史记录对象
        1. 创建(获取)：
            1. window.history
            2. history

        2. 方法：
            * back()	加载 history 列表中的前一个 URL。
            * forward()	加载 history 列表中的下一个 URL。
            * go(参数)	加载 history 列表中的某个具体页面。
                * 参数：
                    * 正数：前进几个历史记录
                    * 负数：后退几个历史记录
        3. 属性：
            * length	返回当前窗口历史列表中的 URL 数量。




## DOM：
	* 概念： Document Object Model 文档对象模型
		* 将标记语言文档的各个组成部分，封装为对象。可以使用这些对象，对标记语言文档进行CRUD的动态操作

	* W3C DOM 标准被分为 3 个不同的部分：

		* 核心 DOM - 针对任何结构化文档的标准模型
			* Document：文档对象
			* Element：元素对象
			* Attribute：属性对象
			* Text：文本对象
			* Comment:注释对象

			* Node：节点对象，其他5个的父对象
		* XML DOM - 针对 XML 文档的标准模型
		* HTML DOM - 针对 HTML 文档的标准模型





	* 核心DOM模型：
		* Document：文档对象
			1. 创建(获取)：在html dom模型中可以使用window对象来获取
				1. window.document
				2. document
			2. 方法：
				1. 获取Element对象：
					1. getElementById()	： 根据id属性值获取元素对象。id属性值一般唯一
					2. getElementsByTagName()：根据元素名称获取元素对象们。返回值是一个数组
					3. getElementsByClassName():根据Class属性值获取元素对象们。返回值是一个数组
					4. getElementsByName(): 根据name属性值获取元素对象们。返回值是一个数组
				2. 创建其他DOM对象：
					createAttribute(name)
                	createComment()
                	createElement()
                	createTextNode()
			3. 属性
		* Element：元素对象
			1. 获取/创建：通过document来获取和创建
			2. 方法：
				1. removeAttribute()：删除属性
				2. setAttribute()：设置属性
		* Node：节点对象，其他5个的父对象
			* 特点：所有dom对象都可以被认为是一个节点
			* 方法：
				* CRUD dom树：
					* appendChild()：向节点的子节点列表的结尾添加新的子节点。
					* removeChild()	：删除（并返回）当前节点的指定子节点。
					* replaceChild()：用新节点替换一个子节点。
			* 属性：
				* parentNode 返回节点的父节点。


	* HTML DOM
		1. 标签体的设置和获取：innerHTML
		2. 使用html元素对象的属性
		3. 控制元素样式
			1. 使用元素的style属性来设置
				如：
					 //修改样式方式1
			        div1.style.border = "1px solid red";
			        div1.style.width = "200px";
			        //font-size--> fontSize
			        div1.style.fontSize = "20px";
			2. 提前定义好类选择器的样式，通过元素的className属性来设置其class属性值。


## 事件监听机制：
	* 概念：某些组件被执行了某些操作后，触发某些代码的执行。	
		* 事件：某些操作。如： 单击，双击，键盘按下了，鼠标移动了
		* 事件源：组件。如： 按钮 文本输入框...
		* 监听器：代码。
		* 注册监听：将事件，事件源，监听器结合在一起。 当事件源上发生了某个事件，则触发执行某个监听器代码。


	* 常见的事件：
		1. 点击事件：
			1. onclick：单击事件
			2. ondblclick：双击事件
		2. 焦点事件
			1. onblur：失去焦点
			2. onfocus:元素获得焦点。

		3. 加载事件：
			1. onload：一张页面或一幅图像完成加载。

		4. 鼠标事件：
			1. onmousedown	鼠标按钮被按下。
			2. onmouseup	鼠标按键被松开。
			3. onmousemove	鼠标被移动。
			4. onmouseover	鼠标移到某元素之上。
			5. onmouseout	鼠标从某元素移开。
			
			
		5. 键盘事件：
			1. onkeydown	某个键盘按键被按下。	
			2. onkeyup		某个键盘按键被松开。
			3. onkeypress	某个键盘按键被按下并松开。

		6. 选择和改变
			1. onchange	域的内容被改变。
			2. onselect	文本被选中。

		7. 表单事件：
			1. onsubmit	确认按钮被点击。
			2. onreset	重置按钮被点击。
